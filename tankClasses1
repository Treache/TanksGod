#include <cmath>

#include "Classes.h"
//meqdar dehie static ha
int Tanks::tedade_tank = 0;

///////////////////////////////////////make point[4]
void Tanks::make_points()
{
	//point 0
	this->point[0].x = this->centerPoint.x -
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * cos(this->alfa * PI / 180 - atan(this->width / this->lenght));

	this->point[0].y = this->centerPoint.y +
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * sin(this->alfa * PI / 180 - atan(this->width / this->lenght));
	//point 1
	this->point[1].x = this->centerPoint.x +
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * cos(this->alfa * PI / 180 - atan(this->width / this->lenght));

	this->point[1].y = this->centerPoint.y +
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * sin(this->alfa * PI / 180 - atan(this->width / this->lenght));
	//point 2
	this->point[2].x = this->centerPoint.x +
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * cos(this->alfa * PI / 180 - atan(this->width / this->lenght));

	this->point[2].y = this->centerPoint.y -
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * sin(this->alfa * PI / 180 - atan(this->width / this->lenght));
	//point 3
	this->point[3].x = this->centerPoint.x -
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * cos(this->alfa * PI / 180 - atan(this->width / this->lenght));

	this->point[3].y = this->centerPoint.y +
		pow(pow(this->lenght, 2) + pow(this->width, 2), 1 / 2) * sin(this->alfa * PI / 180 - atan(this->width / this->lenght));

	this->point[4] = this->point[0];
}

void Tanks::make_tekane(Bullets* bullet, std::vector<Bullets*>* bullets)
{
	this->velocity.x = (this->mass*this->velocity.x + bullet->mass*bullet->velocity.x) / (this->mass + bullet->mass);
	this->velocity.y = (this->mass*this->velocity.y + bullet->mass*bullet->velocity.y) / (this->mass + bullet->mass);

	this->health -= Tanks::health_bullet;
	////tabeye gui vase monfajer kardane tank
	bullet->bullet_Destructor(bullets);
}

